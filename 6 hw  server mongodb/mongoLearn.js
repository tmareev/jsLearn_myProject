const mongo = require('mongodb');
const url = 'mongodb://127.0.0.1:27017';
const connection = mongo.connect(url, 
    {useNewUrlParser: true}, 
    onConnect,
);

// если мы передаем коллбек в другую ф-ю, то монго, в качестве первого аргумента 
// подставит эррор. И если эррор === null то будет выполнять дальше. 
// здесь мы явно написали первый аргумент, чтоб перейти дальше. 
// client - это некий объект для работы с монгой.Что-то типа document когда мы писали сайтик 
// с добавлениями тегов. 
function onConnect(err, client){
    // client.db('check') - выбираем базу данных, аналог use check.
    const db = client.db('check');
    const col = db.collection('users');

    /**********************ДОБАВЛЕНИЕ ЭЛЕМЕНТОВ********************************************************************* */
    // // добавляем запись (document). Обязательно это должен быть объект
    // let data1 = {name: 'Taras', age: 26};
    // let data2 = {name: 'Dasha', age: 23};
    // col.insertOne(data2, onInsert);
    // // добавляем несколько записей (documents) в коллекцию. Передавать нужно массив объектов
    // col.insertMany([data1, data2]);
    


    
    /**********************ПОИСК ЭЛЕМЕНТОВ**************************************************************************** */
    // // поиск ВСЕХ элементов в бд. После чего сформируется указатель. Билет на то что можем взять. 
    // // А затем мы уже их формируем и считываем в onFound и onArrayConverted
    col.find(onFound);
    // // или можно написать поиск по точному значению но ничего не вписывать 
    // col.find({}, onFound);

    // поиск ОПРЕДЕЛЕННОГО элемента по точному значению 
    // col.find({name: 'Taras'}, onFound);

    //например у нас есть элемент {name: 'Ivan', xxx: [a, b, c]} и нам нужно
    //найти его по b. Здесь найдутся все элементы у которых есть b в xxx:
    col.find({
        xxx: 'b'
    },onFound);

    // так найдутся только те элементы у которых только одно значение b в ххх и все:
    col.find({
        xxx: ['b']
    },onFound);

    //например у нас есть элемент {name: 'Ivan', xxx: [a, b, c]} и нам нужно
    //найти только те элементы у которых b идет вторым в очереди массива ххх:
    col.find({
        'xxx.1': 'b'
    },onFound);

    // например у нас есть элемент {name: 'Ivan', xxx: {'0': a, '1': b, 'hoho: 'haha'}}
    // и нам нужно найти только те элементы у которых b идет вторым в очереди 
    // особого массива-объекта ххх:
    col.find({
        'xxx.1': 'b'
    },onFound);

    // например у нас есть элемент {a: {b: {c: [1, 2, 3]}}}
    // сможем найти его по 2:
    col.find({
        'a.b.c': 2
    },onFound);

};

// здесь cursor это ссылка на то что мы ищем. Т.к. данных может быть очень много.
// пытаемся вывести данные в виде массива. Но toArray - это тоже promise, поэтому 
// в качестве параметра снова делаем колбек, чтобы данные успели сформирроваться и вывестись
function onFound(err, cursor){
    cursor.toArray(onArrayConverted);
}
function onArrayConverted(err, data){
    console.log(data);
}


// // для добавления элементов
function onInsert(err, result){
    
}